Below you will see the LeetCode task and my solution in Kotlin.
Do the following:
1. Convert my solution to Java 21. Do not add imports and comments to the code. Do not use fully qualified class names, for example java.util.List<Integer>, use just List<Integer>. All necessary imports are done by the testing system. If the variable type is generic, (for example: List<Integer>, Function<Long, String>), use the 'var' keyword to declare the variable, which was introduced in Java 10.
If the original Kotlin solution uses a data class, use a record instead.
If the original Kotlin solution uses a pair of the same types, use an array of two elements of that type instead. For example:
```kotlin
class Solution {
    fun solve(): Int {
        // ...
        val stack: Deque<Pair<Int, Int>> = LinkedList()
        for ((i, score) in scores.withIndex()) {
            stack.push(score to i)
        }
        // ...
    }
}
```
```java
class Solution {
    public int solve() {
        // ...
        Deque<int[]> stack = new LinkedList<>();
        for (int i = 0; i < scores.length; i++) {
            int score = scores[i];
            stack.push(new int[]{score, i});
        }
        // ...
    }
}
```
If the pair is of different types (e.g. Int and Long), use record Pair. For example:
```kotlin
class Solution {
    fun solve(): Int {
        // ...
        val list = MutableListOf<Pair<Int, Long>>()
        for (num in nums) {
            list += num to num.toLong() * num
        }
        // ...
    }
}
```
```java
class Solution {
    private record Pair(int num, long square) {}

    public int solve() {
        // ...
        var list = new ArrayList<Pair>()
        for (int num : nums) {
            list.add(new Pair(num, (long) num * num));
        }
        // ...
    }
}
```
2. Convert the solution to C++. Do not add includes, comments, and the std:: prefix. If my original Kotlin solution uses a pair, use std::pair from STL.
3. Convert the solution to Python 3. Do not add imports and comments to the code.
4. Create a title for publishing my solution using the following template. Don't remove spaces before "Kotlin" and after "Python".
```markdown
[ Kotlin | Java | C++ | Python ] Simple <technique> solution, detailed explanation
```
Replace <technique> to main solution technique, for example: Sorting, DP, Caching, DFS, BFS, Dijkstra's Algorithm, DSU, Backtracking, Two Pointers, etc.
5. Create a description of my solution using the following Markdown template. Create it as artifact and show it on the right side. Use $$ $$ markdown for complexity, for example: $$O(n)$$.
```markdown
# Intuition
<!-- Describe thoughts on how to solve this problem. -->

# Approach
<!-- Describe approach to solving the problem. -->

# Complexity
- Time complexity:
<!-- Add time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add space complexity here, e.g. $$O(n)$$ -->

# Code
```kotlin []
// Insert my Kotlin code
```

```java []
// Insert the converted Java code
```

```cpp []
// Insert the converted C++ code
```

```python3 []
# Insert the converted Python 3 code
```
```
Remove <!-- --> comments.
There is no need to rewrite my original solution. I am confident in it, as I tested it on LeetCode and got Accepted.
Ultrathink.
The task and my solution: